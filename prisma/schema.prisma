// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User & Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("customer") // customer, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Products & Categories
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  compareAtPrice Float?
  sku         String?  @unique
  stock       Int      @default(0)
  images      String   // JSON array of image URLs
  featured    Boolean  @default(false)
  categoryId  String
  tags        String?  // JSON array
  variants    String?  // JSON array
  details     String?  // JSON object
  sortOrder   Int      @default(0)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
}

// Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  variant   String?  // JSON object
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Orders
model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  userId          String
  status          String   @default("pending") // pending, processing, shipped, delivered, cancelled
  subtotal        Float
  shipping        Float
  tax             Float    @default(0)
  total           Float
  paymentStatus   String   @default("pending") // pending, paid, failed, refunded
  paymentMethod   String?
  paymentIntent   String?
  shippingAddressId String?
  billingAddressId  String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  shippingAddress Address?  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?  @relation("BillingAddress", fields: [billingAddressId], references: [id])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  productName String
  productImage String?
  variant     String? // JSON object

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// Address
model Address {
  id          String   @id @default(cuid())
  userId      String
  type        String   // shipping, billing
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ordersAsShipping   Order[] @relation("ShippingAddress")
  ordersAsBilling    Order[] @relation("BillingAddress")
}

// Content Management
model ContentPage {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // Rich text HTML
  metaTitle   String?
  metaDescription String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON
  updatedAt   DateTime @updatedAt
}
